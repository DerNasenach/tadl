# ...declares a service which is always a singleton and created at application creation time.
# This is the anemic variant of an aggregate Ticket root entity with chat entries.
service TicketChatService {
    // configure is optional and creates a configuration struct and results in a member.
    configure {
        # ...turns a flag on or off and is injected at construction time.
        FeatureFlag bool = false

        # ...turns a flag on or off and is injected at construction time.
        FeatureFlag2 bool = true
    }

    // inject is optional and can only ever refer to interface-types (e.g. repository) within core.
    inject {
        # ...results in the according member.
        repo Tickets
    }

    // private declares other private fields.
    private {
        # ...protects the cache.
        lock sync::Mutex

        # ...caches some stuff and is prone to race conditions.
        cache map!<string,string>
    }



    # ...performs some domain specific validation and delegates to the repo.
    PerformValidation(x str, b str) -> (Task)
}